plugins {
	id "java"
	id "eclipse"
	id "maven-publish"
}

defaultTasks 'dist'

ext {
	enunciateVersion = "2.15.0-tech11"

	guavaVersion = "14.0.1"

	jacksonVersion = "2.10.1"

	junitPlatformVersion = '1.6.2'
	junitJupiterVersion = '5.6.2'
	mockitoVersion = '3.0.0'
	
	publishDir = file("dist/publish")
	
	jdkHome = findJdkHome()
}

repositories {
   	mavenCentral()
	mavenLocal()
}

dependencies {
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    compileOnly "com.webcohesion.enunciate:enunciate-core:${enunciateVersion}"
    compileOnly "com.webcohesion.enunciate:enunciate-jaxb:${enunciateVersion}"
    compileOnly "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compileOnly 'org.freemarker:freemarker:2.3.28'
	compileOnly "com.google.guava:guava:${guavaVersion}"

	testImplementation "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
	testImplementation "org.jboss.resteasy:jaxrs-api:3.0.12.Final"
	testImplementation files("$jdkHome/lib/tools.jar")
	testImplementation "org.slf4j:slf4j-ext:1.7.7"
	testImplementation "ch.qos.logback:logback-classic:1.1.2"
    testImplementation "com.webcohesion.enunciate:enunciate-top:${enunciateVersion}"
   	testImplementation files("build/distributions/openapi-swagger-ui.zip")

   	testImplementation "org.assertj:assertj-core:3.12.2"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
	testImplementation "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
	testRuntimeOnly    "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"


task packSwaggerUi(type: Zip) {
     from "swagger-ui"
     archiveFileName = "openapi-swagger-ui.zip"
}

jar {
    from ("src/main/java") {
        include "**/*.ftl"
    }
    from packSwaggerUi
    destinationDirectory = publishDir
    
    manifest {
		attributes(["Implementation-Version" : project.version])
	}
	archiveVersion = project.version
}


task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc
    destinationDirectory = publishDir

    manifest {
		attributes(["Implementation-Version" : project.version])
	}
	archiveVersion = project.version
	classifier = "javadoc"
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
    destinationDirectory = publishDir

    manifest {
		attributes(["Implementation-Version" : project.version])
	}
	archiveVersion = project.version
	classifier = "sources"
}

test {
  useJUnitPlatform()

  doFirst {
	project.copy {
       	from 'build/resources/main/META-INF'
       	into 'build/classes/main/META-INF/'
   	}
  }
}

task addPackedSwaggerUiToEclipseTest(type: Copy){
	from packSwaggerUi
	into file("bin/test")
}

task addPackedSwaggerUiToTest(type: Copy){
	from packSwaggerUi
	into file("build/classes/java/test")
}


task deleteDist(type: Delete) {
	delete("dist")
	delete("bin")
}
tasks.clean.dependsOn(deleteDist)

group 'dk.jyskebank.tooling.enunciate'
publishing {
	publications {
		mavenJava(MavenPublication) {
			pom.withXml {
				asNode().with {
					appendNode('name', 'enunciate-openapi')
					appendNode('description', 'Enunciate module that generates OpenAPI output')
					appendNode('url', 'https://github.com/stoicflame/enunciate-openapi')
					appendNode('licenses').with {
						appendNode('license').with {
							appendNode('name', 'The Apache Software License, Version 2.0')
						 	appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
						}
					}
					appendNode('developers').with {
						appendNode('developer').with {
							appendNode('id', 'jskov')
							appendNode('name', 'Jesper Skov')
							appendNode('email', 'jskov@jyskebank.dk')
							appendNode('organization', 'Jyske Bank')
							appendNode('organizationUrl', 'http://www.jyskebank.dk')
							appendNode('roles').with {
								appendNode('role', 'developer')
							}
							appendNode('timezone', 'Europe/Copenhagen')
						}
					}
					appendNode('scm').with {
						appendNode('connection', 'scm:git:git@github.com:stoicflame/enunciate-openapi.git')
						appendNode('developerConnection', 'scm:git:git@github.com:stoicflame/enunciate-openapi.git')
						appendNode('url', 'https://github.com/stoicflame/enunciate-openapi')
					}
				}
			}
			from components.java
			version = project.version
		}
	}
}
model {
	tasks.generatePomFileForMavenJavaPublication {
		destination = new File(publishDir, "${project.name}-${project.version}.pom")
	}
}

// Prepare packaged ui for eclipse tests
tasks['eclipse'].dependsOn("addPackedSwaggerUiToEclipseTest", "cleanEclipseClasspath")
tasks['test'].dependsOn("addPackedSwaggerUiToTest")


task dist(dependsOn: ["jar", "javadocJar", "sourceJar", "generatePomFileForMavenJavaPublication"])
task eclipseIvyChanged(dependsOn: "eclipse")
task eclipseGradlePropertiesChanged(dependsOn: "eclipse")
task eclipsePropertiesFolderChanged(dependsOn: "eclipse")
task ciBuild(dependsOn: "test")

eclipseJdt.doLast {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=UTF-8')
}

File findJdkHome() {
	File home = new File(System.getProperty("java.home"))
	if (!home.list().contains("jre")) {
		home = home.getParentFile()
	}
	return home;
}
